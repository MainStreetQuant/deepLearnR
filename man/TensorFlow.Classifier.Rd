% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TensorFlowClassifier.R
\name{TensorFlow.Classifier}
\alias{TensorFlow.Classifier}
\title{Create  Classifier model based on the parameters}
\usage{
TensorFlow.Classifier(modelTag, XTrain, YTrain, nClasses = 2,
  miniBatchSize = 128, steps = 500, optimizer = "SGD",
  learningRate = 0.05, hiddenUnits = c(10, 20, 10), rnnSize = 100,
  nnType = "linear", netType = "ReLU", cellType = "lstm")
}
\arguments{
\item{modelTag}{Tag for this model - can be referenced in other calls like prediction}

\item{XTrain}{The X Matrix for training}

\item{YTrain}{The Y Matrix for training}

\item{nClasses}{The number of classes}

\item{miniBatchSize}{Batch Size for the mini batch for optimization algorithms like SGD}

\item{steps}{Number of epochs for training}

\item{optimizer}{The Optimizer algorithm = "SGD", "Adam","Adagrad" (only "SGD" tested, others ignored)}

\item{learningRate}{The learning rate for optimize algorithm}

\item{hiddenUnits}{The number and architecture of hidden unit layers for dnn e.g. [10,20,10]}

\item{rnnSize}{The size of the rnn cell, e.g. size of your word embeddings}

\item{nnType}{The network type = "linear", "dnn", "rnn", "covNet" 
("rnn" and "covNet" are not implemented, but included for completeness of the interface & future implementation)}

\item{netType}{The network type for the final round = "ReLU","tanh"}

\item{cellType}{The cell type for rnn network = "rnn","gru","lstm" (not implemented, but included for completeness of the interface & future implementation)}
}
\description{
Create  Classifier model based on the parameters
}
\examples{
{
 Y <- titanic.data$Survived
 X <- deepLearnR::titanic.data[,c("Age","SibSp","Fare","Pclass")]
 X$Age[is.na(X$Age)] <- mean(X$Age,na.rm=TRUE)
 set.seed(512)
 inTrain <- sample(1:nrow(X), trunc(nrow(X)*0.8))
 X.Train <- X[inTrain,]
 Y.Train <- Y[inTrain]
 X.Test <- X[-inTrain,]
 Y.Test <- Y[-inTrain]
 deepLearnR::TensorFlow.Classifier(modelTag="tflr-03",X=X.Train,Y=Y.Train,steps=5000)
 pred <- deepLearnR::TensorFlow.predict(modelTag="tflr-03",X=X.Test,Y=Y.Test)
 accuracy <- sum(pred == Y.Test)/length(Y.Test)
 print(accuracy) # Should be ~ 0.6312849
 pred <-  deepLearnR::TensorFlow.predict(modelTag="tflr-03",X=X,Y=Y)
 accuracy <- sum(pred == Y)/length(Y)
 print(accuracy) # Should be ~ 0.6397306
}

}
\seealso{
\code{\link{TensorFlow.predict}}
}

